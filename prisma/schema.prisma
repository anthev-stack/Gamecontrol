// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("STORAGE_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      Role     @default(USER)
  
  // FTP Access
  ftpUsername String?  @unique
  ftpPassword String?  // Encrypted
  ftpEnabled  Boolean  @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  servers   Server[]
}

model Server {
  id          String       @id @default(cuid())
  name        String
  game        GameType
  status      ServerStatus @default(STOPPED)
  
  // Server details (auto-assigned by VM)
  host        String?
  port        Int?
  rconPort    Int?
  rconPassword String?
  
  // Common config
  maxPlayers  Int          @default(10)
  allocatedRam Int         @default(2048) // RAM in MB
  customArgs  String?
  
  // CS2 specific
  tickrate    Int?         // 64 or 128
  map         String?      // de_dust2, de_mirage, etc
  gameMode    String?      // competitive, casual, deathmatch
  workshopMapId String?    // Workshop map ID for custom maps
  steamAccount String?     // sv_setsteamaccount value for server authentication
  
  // Minecraft specific
  difficulty  String?      // peaceful, easy, normal, hard
  worldType   String?      // default, flat, largeBiomes, amplified
  pvp         Boolean?     @default(true)
  hardcore    Boolean?     @default(false)
  spawnProtection Int?     @default(16)
  allowNether Boolean?     @default(true)
  allowFlight Boolean?     @default(false)
  
  // Rust specific
  worldSize   Int?         @default(4000)
  worldSeed   String?
  saveInterval Int?        @default(600)
  
  // VM details
  vmId        String?      // VM identifier
  containerId String?      // Docker container ID
  
  // FTP details
  ftpPath     String?      // Path in user's FTP directory
  
  // Metadata
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  lastStarted DateTime?
  
  // Relations
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       ScheduledTask[]
}

model ScheduledTask {
  id          String       @id @default(cuid())
  name        String
  type        TaskType
  schedule    String       // Cron expression
  enabled     Boolean      @default(true)
  lastRun     DateTime?
  nextRun     DateTime?
  
  // Task configuration
  config      Json?        // Task-specific configuration
  
  // Relations
  serverId    String
  server      Server       @relation(fields: [serverId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum GameType {
  CS2
  MINECRAFT
  RUST
}

enum ServerStatus {
  RUNNING
  STOPPED
  STARTING
  STOPPING
  ERROR
}

enum TaskType {
  STEAM_UPDATE
  MAP_CHANGE
  SERVER_RESTART
  CUSTOM_COMMAND
}

